<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Post-rsses on Phill Sparks</title>
    <link>http://phills.me.uk/post/index.xml</link>
    <description>Recent content in Post-rsses on Phill Sparks</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-GB</language>
    <lastBuildDate>Tue, 26 Aug 2008 12:55:00 +0000</lastBuildDate>
    <atom:link href="http://phills.me.uk/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>cURL Error 26: Failed to open/read local data from file/application</title>
      <link>http://phills.me.uk/post/curl_error_26/</link>
      <pubDate>Tue, 26 Aug 2008 12:55:00 +0000</pubDate>
      
      <guid>http://phills.me.uk/post/curl_error_26/</guid>
      <description>&lt;p&gt;Last night I started working on Lilly&amp;rsquo;s 365 and very quickly ran into a few problems.  Most were simple quirks of &lt;a href=&#34;http://www.site5.com/in.php?id=51960&#34;&gt;site5&lt;/a&gt; fixed by getting the permissions right.  The thing that kept bugging me was Phlickr, and more specifically its use of &lt;a href=&#34;http://curl.haxx.se/&#34;&gt;cURL&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://phlickr.sourceforge.net&#34;&gt;Phlickr&lt;/a&gt; is an open source PHP5 based API kit used to access the Flickr API.  It uses the &lt;a href=&#34;http://en.wikipedia.org/wiki/REST&#34;&gt;REST&lt;/a&gt; method which requires that some actions are POSTs.  The cURL functions in PHP can happily handle this but for some reason they were failing every time&amp;hellip; &amp;ldquo;Failed to open/read local data from file/application&amp;rdquo; (Error 26).  As soon as I disabled the &lt;code&gt;CURLOPT_POST&lt;/code&gt; (making a GET request) cURL made no errors, though the Flickr API didn&amp;rsquo;t like it.&lt;/p&gt;

&lt;p&gt;After much searching later I found the solution was very simple&amp;hellip;  If you&amp;rsquo;re not submitting any post fields then set &lt;code&gt;CURLOPT_POSTFIELDS&lt;/code&gt; to blank, like this&amp;hellip;&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;$ch&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;curl_init($url);&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;// make sure we submit this as a post&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;curl_setopt($ch,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;CURLOPT_POST&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(isset($postParams))&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;curl_setopt($ch,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;CURLOPT_POSTFIELDS&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$postParams);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;curl_setopt($ch,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;CURLOPT_POSTFIELDS&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I can see that this makes sense; a POST is used for submitting data to a server so you need to submit something, even if it&amp;rsquo;s blank.  It would be nice if the error message was a bit more useful or better documented.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How-To: Customise your SSH Config</title>
      <link>http://phills.me.uk/post/how_to_customise_your_ssh_config/</link>
      <pubDate>Sun, 13 Apr 2008 21:30:00 +0000</pubDate>
      
      <guid>http://phills.me.uk/post/how_to_customise_your_ssh_config/</guid>
      <description>&lt;p&gt;I am someone who feels more comfortable using the command-line than many GUI set-ups and who is often SSH-ing between servers; many of these servers have lengthy host names and require various different usernames; luckily the SSH developers thought ahead and came up with a way of pre-setting most options per-host.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s an example that will configure &amp;ldquo;server1.example.com&amp;rdquo; with the user &amp;ldquo;example&amp;rdquo; and the port &amp;ldquo;222&amp;rdquo;.  I&amp;rsquo;ll set this all up as &amp;ldquo;ex1&amp;rdquo;.  Just drop the following in to &lt;code&gt;~/.ssh/config&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;
Host ex1
HostName server1.example.com
User example
Port 222
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now if I call &lt;code&gt;ssh ex1&lt;/code&gt; it&amp;rsquo;s just like calling &lt;code&gt;ssh server1.example.com -l example -p 222&lt;/code&gt;.  You can set-up defaults by using the Host &amp;ldquo;*&amp;rdquo;, I often default the User where I can&amp;rsquo;t have my preferred name&amp;hellip;&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;
Host *
User example
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There are a lot of things you can configure in this way, for a full list check out the man page for ssh_config (5).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How-To: Stop iPhoto From Opening Automatically</title>
      <link>http://phills.me.uk/post/how_to_stop_iphoto_from_opening_automatically/</link>
      <pubDate>Sun, 13 Apr 2008 12:36:00 +0000</pubDate>
      
      <guid>http://phills.me.uk/post/how_to_stop_iphoto_from_opening_automatically/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve stopped using iPhoto recently in favour of &lt;a href=&#34;http://flic.kr&#34;&gt;Flickr&lt;/a&gt; but every time I plug in a camera, or something that looks like it could be a camera, iPhoto opens.  A quick hunt around the Internet and I found the solution&amp;hellip;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open &amp;ldquo;Image Capture&amp;rdquo;&lt;/li&gt;
&lt;li&gt;In &amp;ldquo;Preferences&amp;rdquo;, choose &amp;ldquo;No application&amp;rdquo; for the option &amp;ldquo;When a camera is connected, open&amp;rdquo;&lt;/li&gt;
&lt;li&gt;That&amp;rsquo;s it!  You can quit Image Capture now.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;How easy was that?!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PHP: Late Static Bindings</title>
      <link>http://phills.me.uk/post/php_late_static_bindings/</link>
      <pubDate>Wed, 23 Jan 2008 12:09:00 +0000</pubDate>
      
      <guid>http://phills.me.uk/post/php_late_static_bindings/</guid>
      <description>

&lt;p&gt;New to PHP 5.3.0 will be &lt;strong&gt;late static bindings&lt;/strong&gt;.  Currently you can use the &lt;code&gt;self&lt;/code&gt; keyword in PHP to access static methods of the current class, the new &lt;code&gt;static&lt;/code&gt; keyword allows you to access static methods through the inheritance tree.  This example from the PHP website explains best&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;code&#34;&gt;Code&lt;/h3&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;A&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;who&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;__CLASS__&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;test&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;static&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;who&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;();&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;// Here comes Late Static Bindings     &lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;  
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;  
&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;B&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;A&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;      
    &lt;span style=&#34;color: #66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;who&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
         &lt;span style=&#34;color: #66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;__CLASS__&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;  
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;   
&lt;span style=&#34;color: #a6e22e&#34;&gt;A&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;test&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color: #a6e22e&#34;&gt;B&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;test&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;?&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;output&#34;&gt;Output&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;AB&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are more examples in the PHP manual about &lt;a href=&#34;http://uk3.php.net/manual/en/language.oop5.late-static-bindings.php&#34;&gt;Late Static Bindings&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CSS for Poker Players</title>
      <link>http://phills.me.uk/post/css_for_poker_players/</link>
      <pubDate>Sat, 14 Apr 2007 13:27:00 +0000</pubDate>
      
      <guid>http://phills.me.uk/post/css_for_poker_players/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve just read an excellent explanation of &lt;a href=&#34;http://iamacamera.org/default.aspx?section=design/css&amp;amp;id=95&#34;&gt;CSS Specificity using a poker analogy&lt;/a&gt; and it just makes it so clear to hear it like that.  The author covers everything in terms of the basic hands available in a game of poker.  This can help explain some of the many mysteries of CSS!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Carl wrote:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Some folks getting on board with CSS tend to get stuck on CSS specificity. The descriptions of which rules override other rules tend to make more sense to programmers than designers, since programmers are used to the concepts of inheritance and overriding properties.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re not from the programming world and CSS seems a bit confusing, perhaps this analogy may help clear some concepts up. Think of CSS rules as poker hands. The best hand determines an element&amp;rsquo;s style.&lt;/blockquote&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
  </channel>
</rss>